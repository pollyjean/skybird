// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  features        = ["referentialIntegrity"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int       @id @default(autoincrement())
  username  String?
  email     String    @unique
  password  String?
  avatar    String?
  profile   String?   @db.MediumText
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  likes     Like[]
  tweets    Tweet[]
  replies   Reply[]
}

model Tweet {
  id        Int      @id @default(autoincrement())
  text      String   @db.MediumText
  image     String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  likes     Like[]
  reply     Reply[]

  @@index([authorId])
}

model Reply {
  id            Int      @id @default(autoincrement())
  text          String
  createdAt     DateTime @default(now())
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      Int
  tweet         Tweet    @relation(fields: [tweetId], references: [id])
  tweetId       Int
  parentReply   Reply?   @relation("ParentReply", fields: [parentReplyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentReplyId Int?
  childReplies  Reply[]  @relation("ParentReply")

  @@index([authorId])
  @@index([tweetId])
  @@index([parentReplyId])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   Int

  @@index([tweetId])
  @@index([userId])
}
